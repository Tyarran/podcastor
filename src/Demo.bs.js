// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Reader = require("./Reader.bs.js");
var Process = require("process");
var Slugger = require("slugger");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Colorize = require("./Colorize.bs.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Promises = require("fs/promises");

var podcast_slug = Slugger("mon premier podcast");

var podcast_path = Process.cwd() + "/podcasts/first";

var podcast = {
  name: "Mon premier podcast",
  description: "Le meilleur podcast",
  image: "https://via.placeholder.com/150",
  slug: podcast_slug,
  path: podcast_path,
  episodes: /* [] */0,
  episodesCount: 0
};

var context_podcasts = [podcast];

var context = {
  siteName: "Podcastor",
  description: "The static podcast website generator",
  logo: "https://image.freepik.com/vecteurs-libre/logo-mignon-castor_80802-224.jpg",
  podcasts: context_podcasts
};

function splitExt(filename) {
  var splitted = filename.split(".");
  return "." + Caml_array.get(splitted, splitted.length - 1 | 0);
}

function getEpisodePaths(podcast) {
  var __x = Promises.readdir(podcast.path);
  return __x.then(function (filenames) {
              return Promise.resolve(Belt_Array.map(Belt_Array.keep(filenames, (function (filename) {
                                    return splitExt(filename) === ".md";
                                  })), (function (filename) {
                                return podcast.path + "/" + filename;
                              })));
            });
}

function hasErrors(episodes) {
  var errored = Belt_Array.keep(episodes, (function (episode) {
          if (episode.TAG === /* Ok */0) {
            return false;
          } else {
            return true;
          }
        }));
  if (errored.length !== 0) {
    return [
            true,
            errored
          ];
  } else {
    return [
            false,
            []
          ];
  }
}

function sortEpisodesByDate(a, b) {
  if (Caml_obj.caml_lessthan(a.date, b.date)) {
    return 1;
  } else if (Caml_obj.caml_greaterthan(a.date, b.date)) {
    return -1;
  } else {
    return 0;
  }
}

function getEpisodes(episodefilePaths) {
  var promises = Belt_Array.map(episodefilePaths, (function (filepath) {
          return Promises.readFile(filepath, "utf-8");
        }));
  var __x = Promise.all(promises);
  return __x.then(function (fileContents) {
              var readed = Belt_Array.mapWithIndex(fileContents, (function (index, fileContent) {
                      return Reader.read(fileContent, Caml_array.get(episodefilePaths, index));
                    }));
              var match = Belt_Array.reduce(readed, [
                    /* [] */0,
                    /* [] */0
                  ], (function (acc, item) {
                      var errors = acc[1];
                      var episodes = acc[0];
                      if (item.TAG === /* Ok */0) {
                        return [
                                {
                                  hd: item._0,
                                  tl: episodes
                                },
                                errors
                              ];
                      } else {
                        return [
                                episodes,
                                {
                                  hd: item._0,
                                  tl: errors
                                }
                              ];
                      }
                    }));
              var errors = match[1];
              var tmp;
              if (Belt_List.length(errors) > 0) {
                console.log(Colorize.createElement(/* Red */0, {
                          hd: "Parsing errors :",
                          tl: /* [] */0
                        }, undefined));
                tmp = Belt_List.forEach(errors, (function (error) {
                        console.log(Reader.formatError(error));
                        
                      }));
              } else {
                var result = Belt_List.sort(match[0], sortEpisodesByDate);
                var context_podcasts = [{
                    name: "Mon premier podcast",
                    description: "Le meilleur podcast",
                    image: "https://via.placeholder.com/150",
                    slug: Slugger("mon premier podcast"),
                    path: Process.cwd() + "/podcasts/second",
                    episodes: result,
                    episodesCount: Belt_List.length(result)
                  }];
                var context = {
                  siteName: "Podcastor",
                  description: "The static podcast website generator",
                  logo: "https://image.freepik.com/vecteurs-libre/logo-mignon-castor_80802-224.jpg",
                  podcasts: context_podcasts
                };
                console.log(context);
                tmp = undefined;
              }
              return Promise.resolve(tmp);
            });
}

console.log(Colorize.createElement(/* Yellow */2, {
          hd: "Loading episode files :",
          tl: /* [] */0
        }, undefined));

var __x = getEpisodePaths(podcast);

var result = __x.then(function (filepaths) {
      return Promise.resolve(Belt_Array.forEach(filepaths, (function (filepath) {
                        var __x = Promises.readFile(filepath, "utf-8");
                        __x.then(function (content) {
                              var result = Reader.read(content, filepath);
                              var formated;
                              formated = result.TAG === /* Ok */0 ? Colorize.createElement(/* Green */3, {
                                      hd: "ok",
                                      tl: /* [] */0
                                    }, undefined) : Reader.formatError(result._0);
                              return Promise.resolve((console.log(formated), undefined));
                            });
                        
                      })));
    });

exports.podcast = podcast;
exports.context = context;
exports.splitExt = splitExt;
exports.getEpisodePaths = getEpisodePaths;
exports.hasErrors = hasErrors;
exports.sortEpisodesByDate = sortEpisodesByDate;
exports.getEpisodes = getEpisodes;
exports.result = result;
/* podcast Not a pure module */
